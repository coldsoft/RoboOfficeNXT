/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.robokids.robooffice.desktop.tabs.students.components;

import ca.robokids.robooffice.entity.student.ClassRecord;
import ca.robokids.robooffice.logic.usermanagement.UserActivity;
import java.awt.GridLayout;
import java.util.List;
import javax.swing.JButton;
//import ca.robokids.robooffice.gui.test.ClassRecordJButton;
/**
 *
 * @author Coldsoft
 */
public class ClassRecordsPanel extends javax.swing.JPanel {

   /**
    * Creates new form ClassRecordsPanel
    */
   private static final int COLUMN = 6;
   private static final int DEFAULT_ROW = 2;
   private static final int H_GAP = 2;
   private static final int V_GAP = 2;
   List<ClassRecord> records;
   private boolean editable;
   
   public ClassRecordsPanel() {
      initComponents();
      editable = UserActivity.loginUserHasPrivilege("editStudent");
   }

   public void setClassRecords(List<ClassRecord> records, int total) {
      this.records = records;
      container.removeAll();
      populateCRJButtons(total);
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        container = new javax.swing.JPanel();

        scrollPane.setAutoscrolls(true);

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );

        scrollPane.setViewportView(container);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

   private void populateCRJButtons(int total) {

      int row = (Math.max(total, records.size()) - 1) / ClassRecordsPanel.COLUMN + 1;
      if (row < ClassRecordsPanel.DEFAULT_ROW) {
         row = ClassRecordsPanel.DEFAULT_ROW;
      }

      GridLayout g = new GridLayout(row, ClassRecordsPanel.COLUMN, ClassRecordsPanel.H_GAP, ClassRecordsPanel.V_GAP);
      container.setLayout(g);

      for (int i = 0; i < row * ClassRecordsPanel.COLUMN; i++) {
         ClassRecordJButton btn = new ClassRecordJButton();
         if (i < records.size()) {           
            ClassRecord cr = records.get(i);
            btn.setClassRecord(cr);
            btn.setEditable(editable);
            if ((i + 1) > ClassRecordsPanel.DEFAULT_ROW * ClassRecordsPanel.COLUMN) {
               scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getMaximum());
            }
            
         } else {
            if (i < total && total > records.size()) {
               //if there is still class left for this progress, indicate using buttons.
               ((ClassRecordJButton)btn).setFutureClass(i + 1);
            } else {
               //fill the rest with empty button placement
               ((ClassRecordJButton)btn).setNotUsed();

            }

         }
         
         container.add(btn);

      }
      
   }

   
   
}
