/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.robokids.robooffice.desktop.customSwing;

import ca.robokids.exception.DatabaseException;
import ca.robokids.robooffice.desktop.loaders.FontsLoader;
import ca.robokids.robooffice.desktop.util.PopupMessage;
import ca.robokids.robooffice.entity.schoolmetadata.Classroom;
import ca.robokids.robooffice.entity.schoolmetadata.Timeslot;
import ca.robokids.robooffice.logic.schoolsettings.SchoolManager;
import ca.robokids.robooffice.logic.student.AttendanceManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author Coldsoft
 */
public class AttendanceTimeChooserPanel extends javax.swing.JPanel {

   DefaultListModel<Timeslot> timeslotsModel = new DefaultListModel();
   DefaultListModel<Classroom> classroomsModel = new DefaultListModel();
   
   List<Timeslot> timeslots;
   boolean loading;
   public AttendanceTimeChooserPanel() {
      initComponents();
      loadTimeslot();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calDate = new com.toedter.calendar.JCalendar();
        lblDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstClassroom = new de.javasoft.swing.JYCheckBoxList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTimeslot = new javax.swing.JList();

        setMaximumSize(new java.awt.Dimension(460, 350));

        calDate.setBackground(new java.awt.Color(204, 204, 255));
        calDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calDatePropertyChange(evt);
            }
        });

        lblDate.setFont(FontsLoader.getStaticLabelFont());
        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDate.setText("lblDate:");

        lstClassroom.setBackground(new java.awt.Color(255, 255, 204));
        lstClassroom.setModel(classroomsModel);
        lstClassroom.setCheckBoxSelectableByItemClick(true);
        lstClassroom.setFont(FontsLoader.getDynamicLabelFont());
        jScrollPane1.setViewportView(lstClassroom);

        jLabel2.setFont(FontsLoader.getStaticLabelFont());
        jLabel2.setText("Classrooms");

        lstTimeslot.setFont(FontsLoader.getBigListFont());
        lstTimeslot.setModel(timeslotsModel);
        lstTimeslot.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstTimeslotValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstTimeslot);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(calDate, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(calDate, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(113, 119, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lblDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );
    }// </editor-fold>//GEN-END:initComponents

   private void calDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calDatePropertyChange
      loadTimeslot();

   }//GEN-LAST:event_calDatePropertyChange

   private void lstTimeslotValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstTimeslotValueChanged
      System.out.println("in property change");
      if (!loading)
      {
         
         int index = lstTimeslot.getSelectedIndex();
         if (index > -1)
         {
            Timeslot t = timeslotsModel.get(index);
            loadClassroom(t);
         }
      }
   }//GEN-LAST:event_lstTimeslotValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JCalendar calDate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDate;
    private de.javasoft.swing.JYCheckBoxList lstClassroom;
    private javax.swing.JList lstTimeslot;
    // End of variables declaration//GEN-END:variables
    public List<Timeslot> getTimeslot()
    {
       if (timeslots != null)
         return timeslots;
       return new ArrayList();
    }

   private void loadTimeslot() {
      loading = true;
      Calendar c =  Calendar.getInstance();
        c.setTime(calDate.getDate());
        SimpleDateFormat f = new SimpleDateFormat("dd-MMM-yyyy");
        lblDate.setText(f.format(calDate.getDate()));
      try {
         List<Timeslot> slots = AttendanceManager.getTimeslotByDate(calDate.getDate());
         timeslotsModel.clear();
         for (Timeslot t : slots)
            timeslotsModel.addElement(t);
         timeslots = slots;
         //tell the lstTimeslot listener, can fire propertyChange
         loading = false;
         if (timeslotsModel.size() > 0)
            lstTimeslot.setSelectedIndex(0);
      } catch (DatabaseException ex) {
         PopupMessage.createErrorPopUp(ex.getMessage(), null);
      }
        
        
   }

   private void loadClassroom(Timeslot t) {
      try {
         System.out.println("loadClassroom " + t);
         List<Classroom> classrooms = AttendanceManager.getClassroomByTimeslot(t);
         classroomsModel.clear();
         for (Classroom c : classrooms)
            classroomsModel.addElement(c);
         
         //set all checkbox selected
         int[] indices = new int[classroomsModel.size()];
         for (int i=0; i < indices.length; i++)
            indices[i] = i;
         
         lstClassroom.setSelectedCheckBoxIndices(indices);
         
      } catch (DatabaseException ex) {
         PopupMessage.createErrorPopUp(ex.getMessage(), null);
      }
   }

   
   
}
